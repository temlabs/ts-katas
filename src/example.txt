
inputString = {[()]}

Iteration 0
opening bracket
openingIndexes = [0]
count {: 1

Iteration 1
opening bracket
openingIndexes = [0,1]
count [: 1

Iteration 2
Opening bracket
openingIndexes = [0,1,2]
Count (: 1

Iteration 3
Closing bracket
Count (: 0 and that's more than -1 which is good
Get the character at the last openingIndex which is ( which matches, so all good!
openingIndexes = [0,1]

and so on....

The main idea is to find the next closing bracket and deduce where the corresponding open bracket should be,
and check if it's there,
and also check that the numbers of opens and closes balance out.

function: validateBrackets
    parameters: 
        INPUTSTRING (string)
    returns:
        ISVALID (boolean)

    set CURLYBRACE to a bracket interface with open:'{', close:'}', and count: 0
    set ROUNDBRACE to a bracket interface with open:'(', close:')', and count: 0
    set SQUAREBRACKET to a bracket interface with open:'[', close:']', and count: 0
    set BRACKETARRAY to contain all three aforementioned bracket objects

    set OPENINGINDEXES to an empty array of numbers

    set CLOSEBRACKETFOUND to be false

    for each CHAR in INPUTSTRING
        set THISOBJECT to the corresponding bracket object
        if CHAR is CLOSINGBRACKET
            set CLOSEBRACKETFOUND to TRUE
            decrement THISOBJECT.COUNT

            if thisobject.COUNT < 0
                return FALSE
            endif

            set CORRESPONDINGOPENBRACKET to THISOBJECT.OPEN
            set LASTOPENINDEX to the last item in OPENINGINDEXES
            if the ITEM at the LASTOPENINDEX of the INPUTSTRING !=== CORRESPONDINGOPENBRACKET
                return FALSE
            endif

            remove the last item in OPENINGINDEXES
        else
            increment THISOBJECT.COUNT by 1
            append the current index to OPENINGINDEXES
        endif
    endfor

    if CLOSEBRACKETFOUND === FALSE
        return FALSE
    endif

    return TRUE
    

